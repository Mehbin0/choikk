from flask import Flask, jsonify, request, session
import datetime
import sqlite3
import hashlib
import os
from flask_cors import CORS
from functools import wraps

app = Flask(__name__)
app.secret_key = os.urandom(24)  # Generate a random secret key for sessions
CORS(app, supports_credentials=True)  # Enable credentials for CORS to allow cookies

# Authentication middleware decorator
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify(error="You must be logged in to access this resource."), 401
        return f(*args, **kwargs)
    return decorated_function

# Database setup function
def get_db_connection():
    conn = sqlite3.connect('instance/choikk.db')
    conn.row_factory = sqlite3.Row
    return conn

# Password hashing function
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Initialize database with tables and create default admin user if not exists
def init_db():
    # Check if instance directory exists, if not create it
    import os
    instance_dir = os.path.join(os.path.dirname(__file__), 'instance')
    if not os.path.exists(instance_dir):
        os.makedirs(instance_dir)
    
    # Remove existing database file if it exists
    db_path = os.path.join(instance_dir, 'choikk.db')
    if os.path.exists(db_path):
        os.remove(db_path)
    
    # Connect to database and create tables
    conn = get_db_connection()
    # Create users table
    conn.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Create posts table (will replace in-memory posts)
    conn.execute('''
    CREATE TABLE IF NOT EXISTS posts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        content TEXT NOT NULL,
        author_id INTEGER NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        tags TEXT,
        FOREIGN KEY (author_id) REFERENCES users (id)
    )
    ''')
    
    # Create a default admin user if not exists
    admin_user = conn.execute('SELECT * FROM users WHERE username = ?', ('admin',)).fetchone()
    
    if not admin_user:
        hashed_password = hash_password('admin123')
        conn.execute(
            'INSERT INTO users (username, password) VALUES (?, ?)',
            ('admin', hashed_password)
        )
        
        # Get the admin user id
        admin_user = conn.execute('SELECT * FROM users WHERE username = ?', ('admin',)).fetchone()
        
        # Add a default welcome post
        admin_id = admin_user['id']
        conn.execute(
            'INSERT INTO posts (title, content, author_id, tags) VALUES (?, ?, ?, ?)',
            ('Welcome to Choikk Forum', 'This is the first post on our forum. Feel free to register and start posting!', 
             admin_id, 'welcome,announcement')
        )
    
    conn.commit()
    conn.close()
    print("Database initialized successfully!")

# Initialize the database when app starts
init_db()

@app.route('/')
def home():
    # Ensure user is authenticated if you want to restrict even the home page
    if 'user_id' not in session:
        return jsonify(error="You must be logged in to access this page.", authenticated=False), 401
    
    return jsonify(message="Hello from Choikk backend!", authenticated=True)

@app.route('/status')
@login_required
def status():
    now = datetime.datetime.now()
    return jsonify(
        status="OK",
        timestamp=now.strftime("%Y-%m-%d %H:%M:%S"),
        message="Choikk backend is running smoothly!"
    )

# Authentication endpoints
@app.route('/register', methods=['POST'])
def register():
    username = request.json.get('username')
    password = request.json.get('password')
    
    if not username or not password:
        return jsonify(error="Username and password are required."), 400
    
    # Hash the password
    hashed_password = hash_password(password)
    
    conn = get_db_connection()
    try:
        # Check if username already exists
        user = conn.execute('SELECT * FROM users WHERE username = ?', 
                          (username,)).fetchone()
        
        if user:
            conn.close()
            return jsonify(error="Username already exists."), 409
        
        # Insert new user
        cursor = conn.execute(
            'INSERT INTO users (username, password) VALUES (?, ?)',
            (username, hashed_password)
        )
        conn.commit()
        
        # Get the newly created user for return
        user_id = cursor.lastrowid
        new_user = conn.execute('SELECT id, username, created_at FROM users WHERE id = ?', 
                              (user_id,)).fetchone()
        
        user_data = {
            'id': new_user['id'],
            'username': new_user['username'],
            'created_at': new_user['created_at']
        }
        
        conn.close()
        return jsonify(user=user_data, message="Registration successful"), 201
    except Exception as e:
        conn.close()
        return jsonify(error=str(e)), 500

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    
    if not username or not password:
        return jsonify(error="Username and password are required."), 400
    
    hashed_password = hash_password(password)
    
    conn = get_db_connection()
    user = conn.execute(
        'SELECT * FROM users WHERE username = ? AND password = ?', 
        (username, hashed_password)
    ).fetchone()
    conn.close()
    
    if not user:
        return jsonify(error="Invalid username or password."), 401
    
    # Store user information in session
    session['user_id'] = user['id']
    session['username'] = user['username']
    
    user_data = {
        'id': user['id'],
        'username': user['username']
    }
    
    return jsonify(user=user_data, message="Login successful")

@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return jsonify(message="Logout successful")

@app.route('/check_auth')
def check_auth():
    if 'user_id' in session:
        conn = get_db_connection()
        user = conn.execute('SELECT id, username FROM users WHERE id = ?', 
                          (session['user_id'],)).fetchone()
        conn.close()
        
        if user:
            user_data = {
                'id': user['id'],
                'username': user['username']
            }
            return jsonify(authenticated=True, user=user_data)
    
    return jsonify(authenticated=False)

# Posts endpoints (updated to use database)
@app.route('/posts')
@login_required
def get_all_posts():
    conn = get_db_connection()
    posts_db = conn.execute('''
        SELECT p.id, p.title, p.content, p.timestamp, p.tags, u.username as author
        FROM posts p
        JOIN users u ON p.author_id = u.id
        ORDER BY p.timestamp DESC
    ''').fetchall()
    
    posts = []
    for post in posts_db:
        # Parse tags from string to list
        tags = post['tags'].split(',') if post['tags'] else []
        
        posts.append({
            'id': post['id'],
            'title': post['title'],
            'content': post['content'],
            'author': post['author'],
            'timestamp': post['timestamp'],
            'tags': tags
        })
    
    conn.close()
    return jsonify(posts=posts)

@app.route('/add_post', methods=['POST'])
@login_required
def add_post():
    title = request.json.get('title')
    content = request.json.get('content')
    tags = request.json.get('tags', [])
    
    if not title or not content:
        return jsonify(error="Title and content are required."), 400
    
    # Convert tags list to comma-separated string
    tags_str = ','.join(tags) if tags else ''
    
    conn = get_db_connection()
    try:
        cursor = conn.execute(
            'INSERT INTO posts (title, content, author_id, tags) VALUES (?, ?, ?, ?)',
            (title, content, session['user_id'], tags_str)
        )
        conn.commit()
        
        # Get the newly created post
        post_id = cursor.lastrowid
        post_db = conn.execute('''
            SELECT p.id, p.title, p.content, p.timestamp, p.tags, u.username as author
            FROM posts p
            JOIN users u ON p.author_id = u.id
            WHERE p.id = ?
        ''', (post_id,)).fetchone()
        
        # Parse tags back to list
        tags_list = post_db['tags'].split(',') if post_db['tags'] else []
        
        post = {
            'id': post_db['id'],
            'title': post_db['title'],
            'content': post_db['content'],
            'author': post_db['author'],
            'timestamp': post_db['timestamp'],
            'tags': tags_list
        }
        
        conn.close()
        return jsonify(post=post, message="Post created successfully"), 201
    except Exception as e:
        conn.close()
        return jsonify(error=str(e)), 500

@app.route('/posts/<int:id>')
@login_required
def get_post(id):
    conn = get_db_connection()
    post_db = conn.execute('''
        SELECT p.id, p.title, p.content, p.timestamp, p.tags, u.username as author
        FROM posts p
        JOIN users u ON p.author_id = u.id
        WHERE p.id = ?
    ''', (id,)).fetchone()
    
    if not post_db:
        conn.close()
        return jsonify(error="Post not found"), 404
    
    # Parse tags from string to list
    tags = post_db['tags'].split(',') if post_db['tags'] else []
    
    post = {
        'id': post_db['id'],
        'title': post_db['title'],
        'content': post_db['content'],
        'author': post_db['author'],
        'timestamp': post_db['timestamp'],
        'tags': tags
    }
    
    conn.close()
    return jsonify(post=post)

@app.route('/user/posts')
@login_required
def get_user_posts():
    conn = get_db_connection()
    posts_db = conn.execute('''
        SELECT p.id, p.title, p.content, p.timestamp, p.tags, u.username as author
        FROM posts p
        JOIN users u ON p.author_id = u.id
        WHERE p.author_id = ?
        ORDER BY p.timestamp DESC
    ''', (session['user_id'],)).fetchall()
    
    posts = []
    for post in posts_db:
        # Parse tags from string to list
        tags = post['tags'].split(',') if post['tags'] else []
        
        posts.append({
            'id': post['id'],
            'title': post['title'],
            'content': post['content'],
            'author': post['author'],
            'timestamp': post['timestamp'],
            'tags': tags
        })
    
    conn.close()
    return jsonify(posts=posts)

if __name__ == '__main__':
    app.run(debug=True)
