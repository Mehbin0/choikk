import React, { useState, useEffect } from 'react';
import { Link, useParams } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Badge, Spinner, Pagination, Alert } from 'react-bootstrap';
import { getAllPosts } from '../services/posts';
import { getCategoryPosts } from '../services/categories';

const WelcomeScreen = ({ user, posts: initialPosts, isCategoryView }) => {
  const [posts, setPosts] = useState(initialPosts || []);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [category, setCategory] = useState(null);
  const [pagination, setPagination] = useState({
    currentPage: 1,
    totalPages: 1,
    perPage: 10
  });
  
  const { id: categoryId } = useParams();
  
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        setLoading(true);
        let response;
        
        if (categoryId) {
          response = await getCategoryPosts(categoryId, pagination.currentPage, pagination.perPage);
          setCategory(response.category);
        } else {
          response = await getAllPosts(pagination.currentPage, pagination.perPage);
        }
        
        setPosts(response.posts);
        setPagination({
          currentPage: response.current_page || 1,
          totalPages: response.total_pages || 1,
          perPage: response.per_page || 10
        });
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching posts:', err);
        setError('Failed to load posts. Please try again later.');
        setLoading(false);
      }
    };
    
    fetchPosts();
  }, [categoryId, pagination.currentPage, pagination.perPage]);
  
  const handlePageChange = (page) => {
    setPagination({
      ...pagination,
      currentPage: page
    });
  };
  
  const renderPagination = () => {
    const { currentPage, totalPages } = pagination;
    
    if (totalPages <= 1) return null;
    
    let items = [];
    
    // Add previous button
    items.push(
      <Pagination.Prev 
        key="prev"
        onClick={() => handlePageChange(Math.max(1, currentPage - 1))}
        disabled={currentPage === 1}
      />
    );
    
    // Add first page button
    items.push(
      <Pagination.Item 
        key={1} 
        active={currentPage === 1}
        onClick={() => handlePageChange(1)}
      >
        1
      </Pagination.Item>
    );
    
    // Add ellipsis if needed
    if (currentPage > 3) {
      items.push(<Pagination.Ellipsis key="ellipsis1" disabled />);
    }
    
    // Add pages around current page
    for (let page = Math.max(2, currentPage - 1); page <= Math.min(totalPages - 1, currentPage + 1); page++) {
      if (page === 1 || page === totalPages) continue;
      
      items.push(
        <Pagination.Item 
          key={page} 
          active={currentPage === page}
          onClick={() => handlePageChange(page)}
        >
          {page}
        </Pagination.Item>
      );
    }
    
    // Add ellipsis if needed
    if (currentPage < totalPages - 2) {
      items.push(<Pagination.Ellipsis key="ellipsis2" disabled />);
    }
    
    // Add last page button if there are multiple pages
    if (totalPages > 1) {
      items.push(
        <Pagination.Item 
          key={totalPages} 
          active={currentPage === totalPages}
          onClick={() => handlePageChange(totalPages)}
        >
          {totalPages}
        </Pagination.Item>
      );
    }
    
    // Add next button
    items.push(
      <Pagination.Next 
        key="next"
        onClick={() => handlePageChange(Math.min(totalPages, currentPage + 1))}
        disabled={currentPage === totalPages}
      />
    );
    
    return <Pagination className="justify-content-center mt-4">{items}</Pagination>;
  };
  
  if (loading && !posts.length) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" variant="primary" />
        <p className="mt-3">Loading posts...</p>
      </Container>
    );
  }
  
  if (error) {
    return (
      <Container className="py-5">
        <Alert variant="danger">{error}</Alert>
      </Container>
    );
  }
  
  if (!posts.length) {
    return (
      <Container className="py-5">
        <Card className="border-0 shadow-sm p-4 text-center">
          <Card.Body>
            <h4 className="mb-3">No posts found</h4>
            <p className="text-muted mb-4">Be the first to start a discussion!</p>
            <Button as={Link} to="/create-post" variant="primary">
              <i className="bi bi-plus-circle me-2"></i>
              Create New Post
            </Button>
          </Card.Body>
        </Card>
      </Container>
    );
  }
  
  return (
    <Container className="py-4">
      <div className="mb-4">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h2 className="mb-0">
            {category ? `Posts in ${category.name}` : 'Recent Discussions'}
          </h2>
          <Button as={Link} to="/create-post" variant="primary">
            <i className="bi bi-plus-circle me-2"></i> New Post
          </Button>
        </div>
        {category && (
          <p className="text-muted">{category.description}</p>
        )}
      </div>
      
      <Row className="g-4">
        {posts.map(post => (
          <Col lg={6} key={post.id}>
            <Card className="h-100 border-0 shadow-sm hover-card">
              <Card.Body>
                <div className="d-flex justify-content-between mb-2">
                  <div>
                    {post.category && (
                      <Badge bg="secondary" className="mb-2">
                        {post.category.name}
                      </Badge>
                    )}
                  </div>
                  <small className="text-muted">
                    {new Date(post.created_at).toLocaleDateString()}
                  </small>
                </div>
                <Card.Title>
                  <Link 
                    to={`/post/${post.id}`}
                    className="text-decoration-none text-primary fw-bold"
                  >
                    {post.title}
                  </Link>
                </Card.Title>
                <Card.Text className="text-muted mb-3">
                  {post.content && post.content.length > 150 
                    ? `${post.content.substring(0, 150)}...` 
                    : post.content}
                </Card.Text>
                <div className="d-flex justify-content-between align-items-center">
                  <div className="d-flex align-items-center">
                    <div className="me-2">
                      <i className="bi bi-person-circle text-secondary"></i>
                    </div>
                    <div>
                      <p className="mb-0 small">{post.author_name}</p>
                    </div>
                  </div>
                  <div>
                    <Badge bg="light" text="dark" className="me-2">
                      <i className="bi bi-chat me-1"></i>
                      {post.comment_count || 0}
                    </Badge>
                    <Badge bg="light" text="dark">
                      <i className="bi bi-eye me-1"></i>
                      {post.view_count || 0}
                    </Badge>
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>
      
      {renderPagination()}
    </Container>
  );
};

export default WelcomeScreen;
