// filepath: c:\Users\User\choikk\frontend\src\services\auth.js
// Authentication service

// Use environment variable or default to localhost if not defined
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

// Store CSRF token
let csrfToken = null;

export const setCsrfToken = (token) => {
  csrfToken = token;
  localStorage.setItem('csrfToken', token);
};

export const getCsrfToken = () => {
  if (!csrfToken) {
    csrfToken = localStorage.getItem('csrfToken');
  }
  return csrfToken;
};

// Add CSRF token to headers if available
const getAuthHeaders = () => {
  const headers = {
    'Content-Type': 'application/json',
  };
  
  const token = getCsrfToken();
  if (token) {
    headers['X-CSRF-Token'] = token;
  }
  
  return headers;
};

export const login = async (username, password) => {
  try {
    const response = await fetch(`${API_URL}/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ username, password }),
      credentials: 'include'
    });

    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || 'Login failed');
    }

    // Store user info in localStorage
    localStorage.setItem('user', JSON.stringify(data.user));
    
    // Store CSRF token if provided
    if (data.csrf_token) {
      setCsrfToken(data.csrf_token);
    }
    
    return data;
  } catch (error) {
    console.error('Login error:', error);
    throw error;
  }
};

export const register = async (username, password, email) => {
  try {
    const response = await fetch(`${API_URL}/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ username, password, email }),
      credentials: 'include'
    });

    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || 'Registration failed');
    }
    
    // Store user info in localStorage if auto-logged in
    if (data.user) {
      localStorage.setItem('user', JSON.stringify(data.user));
    }
    
    // Store CSRF token if provided
    if (data.csrf_token) {
      setCsrfToken(data.csrf_token);
    }
    
    return data;
  } catch (error) {
    console.error('Registration error:', error);
    throw error;
  }
};

export const logout = async () => {
  try {
    const response = await fetch(`${API_URL}/logout`, {
      method: 'POST',
      headers: getAuthHeaders(),
      credentials: 'include'
    });

    // Clear user data and CSRF token from localStorage
    localStorage.removeItem('user');
    localStorage.removeItem('csrfToken');
    csrfToken = null;
    
    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || 'Logout failed');
    }
    return data;
  } catch (error) {
    console.error('Logout error:', error);
    throw error;
  }
};

export const checkAuth = async () => {
  try {
    const response = await fetch(`${API_URL}/check_auth`, {
      method: 'GET',
      headers: getAuthHeaders(),
      credentials: 'include'
    });

    const data = await response.json();
    
    if (data.authenticated) {
      // Update user info in localStorage
      localStorage.setItem('user', JSON.stringify(data.user));
      
      return { authenticated: true, user: data.user };
    } else {
      // Clear user data from localStorage
      localStorage.removeItem('user');
      return { authenticated: false };
    }
  } catch (error) {
    console.error('Auth check error:', error);
    localStorage.removeItem('user');
    return { authenticated: false, error };
  }
};

export const getCurrentUser = () => {
  const userStr = localStorage.getItem('user');
  if (userStr) {
    try {
      return JSON.parse(userStr);
    } catch (error) {
      console.error('Error parsing user data:', error);
      return null;
    }
  }
  return null;
};

// User profile functions
export const getUserProfile = async () => {
  try {
    const response = await fetch(`${API_URL}/user/profile`, {
      method: 'GET',
      headers: getAuthHeaders(),
      credentials: 'include'
    });

    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || 'Failed to get user profile');
    }
    
    return data.user;
  } catch (error) {
    console.error('Get profile error:', error);
    throw error;
  }
};

export const updateUserProfile = async (profileData) => {
  try {
    const response = await fetch(`${API_URL}/user/profile`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify(profileData),
      credentials: 'include'
    });

    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || 'Failed to update profile');
    }
    
    return data;
  } catch (error) {
    console.error('Update profile error:', error);
    throw error;
  }
};

export const changePassword = async (currentPassword, newPassword) => {
  try {
    const response = await fetch(`${API_URL}/user/change-password`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify({ current_password: currentPassword, new_password: newPassword }),
      credentials: 'include'
    });

    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || 'Failed to change password');
    }
    
    return data;
  } catch (error) {
    console.error('Change password error:', error);
    throw error;
  }
};
